{"version":3,"sources":["graphql/index.js","graphql/queries/author.js","graphql/author.js","redux/actions/author.js","components/Authors.component.jsx","redux/actions/book.js","graphql/queries/book.js","graphql/book.js","components/Books.component.jsx","components/Tabs.component.jsx","App.jsx","serviceWorker.js","redux/reducers/author.js","redux/reducers/book.js","redux/reducers/index.js","index.js"],"names":["URI","window","location","origin","queryGraphQL","query","a","fetch","method","headers","body","JSON","stringify","res","json","data","mutationGraphQL","variables","console","log","GET_ALL_AUTHORS","ADD_AUTHOR","DELETE_AUTHOR","EDIT_AUTHOR","fetchAllAuthors","authors","addAuthor","author","deleteAuthor","id","editAuthor","setAuthors","type","AuthorListItem","name","noOfBooksPublished","editHandler","deleteHandler","className","onClick","Authors","props","handleChange","e","setState","target","value","handleSubmit","preventDefault","state","parseInt","saveAuthor","dispatch","AuthorActions","handleEdit","editData","Swal","fire","title","showCancelButton","width","padding","background","backdrop","html","focusConfirm","allowOutsideClick","preConfirm","document","getElementById","handleDelete","authorId","this","authorsList","map","key","onSubmit","required","placeholder","onChange","Component","connect","store","setBooks","books","addBook","book","editBook","GET_ALL_BOOKS","ADD_BOOK","DELETE_BOOK","EDIT_BOOK","fetchAllBooks","deleteBook","BookListItem","Books","savedBook","BookActions","editedBook","updateBook","bookId","booksList","Tabs","activeClassName","to","React","App","path","exact","render","component","Boolean","hostname","match","authorReducer","action","filter","bookReducer","allReducers","combineReducers","createStore","reducers","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8UACaA,EAAMC,OAAOC,SAASC,OAAS,WAErC,SAAeC,EAAtB,kC,4CAAO,WAA4BC,GAA5B,mBAAAC,EAAA,sEACcC,MAAMP,EAAK,CACxBQ,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACP,YANvB,cACGQ,EADH,gBASkBA,EAAIC,OATtB,uBASIC,EATJ,EASIA,KATJ,kBAUIA,GAVJ,4C,sBAaA,SAAeC,EAAtB,kC,4CAAO,WAA+BX,GAA/B,iCAAAC,EAAA,6DAAsCW,EAAtC,+BAAkD,GACrDC,QAAQC,IAAIF,GADT,SAEcV,MAAMP,EAAK,CACxBQ,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CAACP,QAAOY,gBAP9B,cAEGJ,EAFH,gBAUkBA,EAAIC,OAVtB,uBAUIC,EAVJ,EAUIA,KAVJ,kBAWIA,GAXJ,6C,sBChBA,IAAMK,EAAe,yHAUfC,EAAU,qOAUVC,EAAa,oHAQbC,EAAW,6PCzBjB,SAAeC,IAAtB,+B,4CAAO,4BAAAlB,EAAA,sEACmBF,EAAagB,GADhC,cACGK,EADH,yBAEIA,EAAQA,SAFZ,4C,sBAKA,SAAeC,EAAtB,kC,4CAAO,WAAyBC,GAAzB,SAAArB,EAAA,sEACUU,EAAgBK,EAAYM,GADtC,oF,sBAIA,SAAeC,EAAtB,kC,4CAAO,WAA4BC,GAA5B,SAAAvB,EAAA,sEACUU,EAAgBM,EAAe,CAACO,OAD1C,oF,sBAIA,SAAeC,EAAtB,kC,4CAAO,WAA0BH,GAA1B,SAAArB,EAAA,sEACUU,EAAgBO,EAAaI,GADvC,oF,sBCdA,IAAMI,EAAa,SAACN,GACzB,MAAO,CACLO,KAAM,cACNjB,KAAM,CACFU,aAMKC,EAAY,SAACC,GACxB,MAAO,CACLK,KAAM,aACNjB,KAAM,CACFY,YAKKG,EAAa,SAACH,GACvB,MAAO,CACLK,KAAM,cACNjB,KAAM,CACFY,Y,iBCnBV,SAASM,EAAT,GAAqF,IAA5DJ,EAA2D,EAA3DA,GAAIK,EAAuD,EAAvDA,KAAMC,EAAiD,EAAjDA,mBAAoBC,EAA6B,EAA7BA,YAAaC,EAAgB,EAAhBA,cAChE,OACI,yBAAKC,UAAU,aACX,8BAAOT,GACP,8BAAOK,GACP,8BAAOC,GACP,0BAAMG,UAAU,oBACZ,4BAAQC,QAAS,kBAAMH,EAAY,CAACP,KAAIK,OAAMC,yBAA9C,QACA,4BAAQI,QAAS,kBAAMF,EAAcR,KAArC,Y,IAMVW,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOX,KAAOS,EAAEE,OAAOC,SAVf,EAcnBC,aAdmB,uCAcJ,WAAOJ,GAAP,iBAAArC,EAAA,6DACXqC,EAAEK,iBACIrB,EAAS,CACXO,KAAM,EAAKe,MAAMf,KACjBC,mBAAoBe,SAAS,EAAKD,MAAMd,qBAJjC,SAOcT,EAAUC,GAPxB,OAOLwB,EAPK,OAQXjC,QAAQC,IAAIgC,GACZ,EAAKV,MAAMW,SAASC,EAAwBF,EAAWzB,YACvD,EAAKkB,SAAS,CACVV,KAAM,GACNC,mBAAoB,IAZb,2CAdI,wDA8BnBmB,WA9BmB,uCA8BN,WAAOC,GAAP,mBAAAjD,EAAA,sEACekD,IAAKC,KAAK,CAC9BC,MAAO,cACPC,kBAAkB,EAClBC,MAAO,IACPC,QAAS,MACTC,WAAY,4DACZC,SAAS,oLAMTC,KAAK,8GAAD,OAC2FT,EAASrB,KADpG,sJAEwHqB,EAASpB,mBAFjI,qBAIJ8B,cAAc,EACdC,mBAAmB,EACnBC,WAAY,WACR,MAAO,CACHjC,KAAMkC,SAASC,eAAe,eAAevB,MAC7CX,mBAAoBe,SAASkB,SAASC,eAAe,gCAAgCvB,WAtBxF,uBACDA,EADC,EACDA,MA8BJnB,EAHAmB,EAGM,2BACCA,GADD,IAEFjB,GAAI0B,EAAS1B,KAJR0B,EA7BJ,SAoCHzB,EAAWH,GApCR,OAqCT,EAAKc,MAAMW,SAASC,EAAyB1B,IArCpC,2CA9BM,wDAsEnB2C,aAtEmB,uCAsEJ,WAAOzC,GAAP,SAAAvB,EAAA,sEACLsB,EAAaC,GADR,OAEX,EAAKY,MAAMW,SD9DR,CACHpB,KAAM,gBACNjB,KAAM,CACFwD,SC2D2C1C,KAFpC,2CAtEI,sDAEf,EAAKoB,MAAQ,CACTf,KAAM,GACNC,mBAAoB,IAJT,E,qDA2ET,IAAD,OACLjB,QAAQC,IAAIqD,KAAK/B,OACjB,IAAMgC,EAAcD,KAAK/B,MAAMhB,QAAQiD,KAAI,SAAA/C,GAAM,OAAI,kBAACM,EAAD,eAAgB0C,IAAKhD,EAAOE,IAAQF,EAApC,CAA4CS,YAAa,EAAKkB,WAAYjB,cAAe,EAAKiC,mBACnJ,OACI,6BAAShC,UAAU,WACf,0BAAMsC,SAAUJ,KAAKzB,cACjB,2BAAOf,KAAK,OAAO6C,UAAQ,EAAC3C,KAAK,OAAO4C,YAAY,cAAcC,SAAUP,KAAK9B,aAAcI,MAAO0B,KAAKvB,MAAMf,OACjH,2BAAOF,KAAK,SAAS6C,UAAQ,EAAC3C,KAAK,qBAAqB4C,YAAY,kBAAkBC,SAAUP,KAAK9B,aAAcI,MAAO0B,KAAKvB,MAAMd,qBACrI,2BAAOH,KAAK,YAEhB,yBAAKM,UAAU,eACVmC,Q,GAvFCO,aAsGPC,eAPS,SAACC,GACrB,MAAO,CACHzD,QAASyD,EAAMzD,WAKRwD,CAAyBzC,GC1H3B2C,EAAW,SAACC,GACvB,MAAO,CACLpD,KAAM,YACNjB,KAAM,CACFqE,WAKKC,EAAU,SAACC,GACpB,MAAO,CACLtD,KAAM,WACNjB,KAAM,CACFuE,UAKKC,EAAW,SAACD,GACvB,MAAO,CACLtD,KAAM,YACNjB,KAAM,CACJuE,UCtBKE,EAAa,4LAcbC,EAAQ,wQAcRC,EAAW,gHAQXC,EAAS,gSCjCf,SAAeC,IAAtB,+B,4CAAO,4BAAAtF,EAAA,sEACiBF,EAAaoF,GAD9B,cACGJ,EADH,yBAEIA,EAAMA,OAFV,4C,sBAKA,SAAeC,EAAtB,kC,4CAAO,WAAuBC,GAAvB,SAAAhF,EAAA,sEACUU,EAAgByE,EAAUH,GADpC,oF,sBAIA,SAAeO,GAAtB,mC,8CAAO,WAA0BhE,GAA1B,SAAAvB,EAAA,sEACUU,EAAgB0E,EAAa,CAAC7D,OADxC,oF,sBAIA,SAAe0D,GAAtB,mC,8CAAO,WAAwBD,GAAxB,SAAAhF,EAAA,sEACUU,EAAgB2E,EAAWL,GADrC,oF,sBCVP,SAASQ,GAAT,GAAiF,IAA1DjE,EAAyD,EAAzDA,GAAIK,EAAqD,EAArDA,KAAMqC,EAA+C,EAA/CA,SAAUnC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,cAAeV,EAAS,EAATA,OACnE,OACI,yBAAKW,UAAU,aACX,8BAAOT,GACP,8BAAOK,GACP,8BAAOP,EAAOO,MAAQ,IACtB,0BAAMI,UAAU,oBACZ,4BAAQC,QAAS,kBAAMH,EAAY,CAACP,KAAIK,OAAMqC,eAA9C,QACA,4BAAQhC,QAAS,kBAAMF,EAAcR,KAArC,Y,IAMVkE,G,kDACF,WAAYtD,GAAQ,IAAD,8BACf,cAAMA,IAOVC,aAAe,SAACC,GACZzB,QAAQC,IAAIwB,EAAEE,OAAOX,KAAMS,EAAEE,OAAOC,OACpC,EAAKF,SAAL,eACKD,EAAEE,OAAOX,KAAOS,EAAEE,OAAOC,SAXf,EAenBC,aAfmB,uCAeJ,WAAOJ,GAAP,iBAAArC,EAAA,6DACXqC,EAAEK,iBACIsC,EAAO,CACTpD,KAAM,EAAKe,MAAMf,KACjBqC,SAAUrB,SAAS,EAAKD,MAAMsB,WAJvB,SAOac,EAAQC,GAPrB,OAOLU,EAPK,OAQX9E,QAAQC,IAAI6E,GAEZ,EAAKvD,MAAMW,SAAS6C,EAAoBD,EAAUX,UAClD,EAAKzC,SAAS,CACVV,KAAM,GACNqC,SAAU,KAbH,2CAfI,wDAgCnBjB,WAhCmB,uCAgCN,WAAOC,GAAP,uBAAAjD,EAAA,6DACHmE,EAAc,EAAKhC,MAAMhB,QAAQiD,KAAI,SAAA/C,GAAM,6BAAoBA,EAAOE,GAA3B,oBAAyCF,EAAOE,GAAhD,aAAuDF,EAAOO,KAA9D,gBADxC,SAEesB,IAAKC,KAAK,CAC9BC,MAAO,cACPC,kBAAkB,EAClBC,MAAO,IACPC,QAAS,MACTC,WAAY,4DACZC,SAAS,oLAMTC,KAAK,qHAAD,OACkGT,EAASrB,KAD3G,8FAEgEqB,EAASgB,SAFzE,kCAGME,EAHN,6CAMJR,cAAc,EACdC,mBAAmB,EACnBC,WAAY,WAGR,MAAO,CACHjC,KAHSkC,SAASC,eAAe,aAAavB,MAI9CyB,SAHarB,SAASkB,SAASC,eAAe,iBAAiBvB,WAxBlE,uBAEDA,EAFC,EAEDA,MA6BJwC,EAAO,GAIPA,EAHAxC,EAGI,2BACGA,GADH,IAEAjB,GAAI0B,EAAS1B,KAJV0B,EAjCF,SAwCgBgC,GAASD,GAxCzB,OAwCHY,EAxCG,OAyCThF,QAAQC,IAAI+E,GACZ,EAAKzD,MAAMW,SAAS6C,EAAqBC,EAAWC,aA1C3C,4CAhCM,wDA6EnB7B,aA7EmB,uCA6EJ,WAAOzC,GAAP,SAAAvB,EAAA,sEACLuF,GAAWhE,GADN,OAEX,EAAKY,MAAMW,SHxER,CACHpB,KAAM,cACNjB,KAAM,CACFqF,OGqEuCvE,KAFhC,2CA7EI,sDAEf,EAAKoB,MAAQ,CACTf,KAAM,GACNqC,SAAU,GAJC,E,qDAkFT,IAAD,OAUC8B,EAAY7B,KAAK/B,MAAM2C,MAAMV,KAAI,SAAAY,GAAI,OAAI,kBAACQ,GAAD,eAAcnB,IAAKW,EAAKzD,IAAQyD,EAAhC,CAAsClD,YAAa,EAAKkB,WAAYjB,cAAe,EAAKiC,mBACjIG,EAAcD,KAAK/B,MAAMhB,QAAQiD,KAAI,SAAA/C,GAAM,OAAI,4BAAQgD,IAAKhD,EAAOE,GAAIiB,MAAOnB,EAAOE,IAAKF,EAAOO,SACvG,OACI,6BAASI,UAAU,SACf,0BAAMsC,SAAUJ,KAAKzB,cACjB,2BAAOf,KAAK,OAAO6C,UAAQ,EAAC3C,KAAK,OAAO4C,YAAY,YAAYC,SAAUP,KAAK9B,aAAcI,MAAO0B,KAAKvB,MAAMf,OAC/G,4BAAQA,KAAK,WAAW2C,UAAQ,EAACE,SAAUP,KAAK9B,aAAcI,MAAO0B,KAAKvB,MAAMsB,UAC3EE,GAEL,2BAAOzC,KAAK,YAEhB,yBAAKM,UAAU,aACV+D,Q,GAzGDrB,aAwHLC,gBARS,SAACC,GACrB,MAAO,CACHE,MAAOF,EAAME,MACb3D,QAASyD,EAAMzD,WAKRwD,CAAyBc,I,SCpIlCO,G,oTAEyB9E,I,cAAjBC,E,OACN+C,KAAK/B,MAAMW,SAASC,EAAyB5B,I,SACzBmE,I,OAAdR,E,OACNZ,KAAK/B,MAAMW,SAAS6C,EAAqBb,I,qIAIzC,OACI,yBAAK9C,UAAU,QACX,kBAAC,KAAD,CAASiE,gBAAgB,aAAajE,UAAU,MAAMkE,GAAG,UAAzD,SACA,kBAAC,KAAD,CAASD,gBAAgB,aAAajE,UAAU,MAAMkE,GAAG,YAAzD,gB,GAZGC,IAAMzB,WAyBVC,gBAPS,SAACC,GACrB,MAAO,CACHE,MAAOF,EAAME,MACb3D,QAASyD,EAAMzD,WAIRwD,CAAyBqB,ICXzBI,OAff,WACE,OACE,yBAAKpE,UAAU,OACb,kBAAC,GAAD,MACA,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqE,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAAC,IAAD,CAAUL,GAAG,cACjD,kBAAC,IAAD,CAAOG,KAAK,SAASG,UAAWf,KAChC,kBAAC,IAAD,CAAOY,KAAK,WAAWG,UAAWtE,QCHxBuE,QACW,cAA7B9G,OAAOC,SAAS8G,UAEe,UAA7B/G,OAAOC,SAAS8G,UAEhB/G,OAAOC,SAAS8G,SAASC,MACvB,2D,sBCOSC,GAzBO,WAAyB,IAAxBjE,EAAuB,uDAAf,GAAIkE,EAAW,uCAE1C,OADAjG,QAAQC,IAAIgG,GACLA,EAAOnF,MACV,IAAK,cAED,OADAiB,EAAQkE,EAAOpG,KAAKU,QAExB,IAAK,aAED,OADAwB,EAAK,uBAAOA,GAAP,CAAckE,EAAOpG,KAAKY,SAEnC,IAAK,cAOD,OANAsB,EAAQA,EAAMyB,KAAI,SAAA/C,GACd,OAAGA,EAAOE,KAAOsF,EAAOpG,KAAKY,OAAOE,GACzBsF,EAAOpG,KAAKY,OAEhBA,KAGf,IAAK,gBAED,OADAsB,EAAQA,EAAMmE,QAAO,SAAAzF,GAAM,OAAIA,EAAOE,KAAOsF,EAAOpG,KAAKwD,YAE7D,QACI,OAAOtB,ICGJoE,GAxBK,WAAyB,IAAxBpE,EAAuB,uDAAf,GAAIkE,EAAW,uCACxC,OAAOA,EAAOnF,MACV,IAAK,YAED,OADAiB,EAAQkE,EAAOpG,KAAKqE,MAExB,IAAK,WAED,OADAnC,EAAK,uBAAOA,GAAP,CAAckE,EAAOpG,KAAKuE,OAEnC,IAAK,YAOD,OANArC,EAAQA,EAAMyB,KAAI,SAAAY,GACd,OAAGA,EAAKzD,KAAOsF,EAAOpG,KAAKuE,KAAKzD,GACrBsF,EAAOpG,KAAKuE,KAEhBA,KAGf,IAAK,cAED,OADArC,EAAQA,EAAMmE,QAAO,SAAA9B,GAAI,OAAIA,EAAKzD,KAAOsF,EAAOpG,KAAKqF,UAEzD,QACI,OAAOnD,ICXJqE,GALKC,aAAgB,CAChC9F,QAASyF,GACT9B,MAAOiC,KCILnC,GAAQsC,aACZC,GACAxH,OAAOyH,8BAAgCzH,OAAOyH,gCAGhDC,IAASd,OACP,kBAAC,IAAMe,WAAP,KACE,kBAAC,IAAD,CAAU1C,MAAOA,IACf,kBAAC,KAAD,KACE,kBAAC,GAAD,SAINd,SAASC,eAAe,SJ4GpB,kBAAmBwD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlH,QAAQkH,MAAMA,EAAMC,c","file":"static/js/main.e3c8b123.chunk.js","sourcesContent":["// export const URI = 'http://localhost:5000/graphql';\r\nexport const URI = window.location.origin + '/graphql';\r\n\r\nexport async function queryGraphQL(query) {\r\n    const res= await fetch(URI, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({query})\r\n    });\r\n\r\n    const {data} = await res.json();\r\n    return data;\r\n}\r\n\r\nexport async function mutationGraphQL(query, variables = {}) {\r\n    console.log(variables);\r\n    const res= await fetch(URI, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({query, variables})\r\n    });\r\n\r\n    const {data} = await res.json();\r\n    return data\r\n}","export const GET_ALL_AUTHORS = `\r\n    query {\r\n        authors {\r\n            id\r\n            name\r\n            noOfBooksPublished\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_AUTHOR = `\r\n    mutation addAuthor($name:String!, $noOfBooksPublished: Int!) {\r\n        addAuthor(name:$name,noOfBooksPublished:$noOfBooksPublished) {\r\n            name\r\n            id\r\n            noOfBooksPublished\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_AUTHOR = `\r\n    mutation deleteAuthor($id: Int!){\r\n        deleteAuthor(id:$id) {\r\n            result\r\n        }\r\n    }  \r\n`;\r\n\r\nexport const EDIT_AUTHOR = `\r\n    mutation updateAuthor($id: Int!, $name: String, $noOfBooksPublished: Int) {\r\n        updateAuthor(id:$id, name:$name, noOfBooksPublished:$noOfBooksPublished){\r\n            id\r\n            name\r\n            noOfBooksPublished\r\n        }\r\n    }\r\n`","import { mutationGraphQL, queryGraphQL, URI } from './';\r\nimport { ADD_AUTHOR, DELETE_AUTHOR, EDIT_AUTHOR, GET_ALL_AUTHORS } from './queries/author';\r\n\r\nexport async function fetchAllAuthors() {\r\n    const authors = await queryGraphQL(GET_ALL_AUTHORS);\r\n    return authors.authors;\r\n}\r\n\r\nexport async function addAuthor(author) {\r\n    return await mutationGraphQL(ADD_AUTHOR, author);\r\n}\r\n\r\nexport async function deleteAuthor(id) {\r\n    return await mutationGraphQL(DELETE_AUTHOR, {id});\r\n}\r\n\r\nexport async function editAuthor(author) {\r\n    return await mutationGraphQL(EDIT_AUTHOR, author)\r\n}","import { fetchAllAuthors } from \"../../graphql/author\"\r\n\r\nexport const setAuthors = (authors) => {\r\n  return {\r\n    type: 'SET_AUTHORS',\r\n    data: {\r\n        authors\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport const addAuthor = (author) => {\r\n  return {\r\n    type: 'ADD_AUTHOR',\r\n    data: {\r\n        author\r\n    }\r\n  }\r\n}\r\n\r\nexport const editAuthor = (author) => {\r\n    return {\r\n      type: 'EDIT_AUTHOR',\r\n      data: {\r\n          author\r\n      }\r\n    }\r\n}\r\n\r\nexport const deleteAuthor = (authorId) => {\r\n    return {\r\n        type: 'DELETE_AUTHOR',\r\n        data: {\r\n            authorId\r\n        }\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as AuthorActions from '../redux/actions/author';\r\nimport Swal from 'sweetalert2';\r\nimport { addAuthor, deleteAuthor, editAuthor, fetchAllAuthors } from '../graphql/author';\r\n\r\nfunction AuthorListItem({id, name, noOfBooksPublished, editHandler, deleteHandler}) {\r\n    return (\r\n        <div className=\"list-item\">\r\n            <span>{id}</span>\r\n            <span>{name}</span>\r\n            <span>{noOfBooksPublished}</span>\r\n            <span className=\"button-container\">\r\n                <button onClick={() => editHandler({id, name, noOfBooksPublished})}>Edit</button>\r\n                <button onClick={() => deleteHandler(id)}>Delete</button>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Authors extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            noOfBooksPublished: ''\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const author = {\r\n            name: this.state.name,\r\n            noOfBooksPublished: parseInt(this.state.noOfBooksPublished)\r\n        };\r\n\r\n        const saveAuthor = await addAuthor(author);\r\n        console.log(saveAuthor);\r\n        this.props.dispatch(AuthorActions.addAuthor(saveAuthor.addAuthor));\r\n        this.setState({\r\n            name: '',\r\n            noOfBooksPublished: 0\r\n        });\r\n    }\r\n\r\n    handleEdit = async (editData) => {\r\n        const { value } = await Swal.fire({\r\n            title: 'Edit Author',\r\n            showCancelButton: true,\r\n            width: 600,\r\n            padding: '3em',\r\n            background: '#fff url(https://sweetalert2.github.io//images/trees.png)',\r\n            backdrop: `\r\n                rgba(0,0,123,0.4)\r\n                url(\"https://sweetalert2.github.io//images/nyan-cat.gif\")\r\n                left top\r\n                no-repeat\r\n            `,\r\n            html: `\r\n                <input type=\"text\" id=\"author-name\" class=\"modal-input\" placeholder=\"Author Name\" value=\"${editData.name}\"/>\r\n                <input type=\"number\" id=\"author-no-of-books-published\" class=\"modal-input\" placeholder=\"No of books published\" value=\"${editData.noOfBooksPublished}\"/>\r\n            `,\r\n            focusConfirm: false,\r\n            allowOutsideClick: false,\r\n            preConfirm: () => {\r\n                return {\r\n                    name: document.getElementById('author-name').value,\r\n                    noOfBooksPublished: parseInt(document.getElementById('author-no-of-books-published').value)\r\n                }\r\n            }\r\n        });\r\n\r\n        let author;\r\n        if(!value) {\r\n            author = editData;\r\n        } else {\r\n            author = {\r\n                ...value,\r\n                id: editData.id\r\n            };\r\n        }\r\n        await editAuthor(author);\r\n        this.props.dispatch(AuthorActions.editAuthor(author));\r\n    }\r\n\r\n    handleDelete = async (id) => {\r\n        await deleteAuthor(id);\r\n        this.props.dispatch(AuthorActions.deleteAuthor(id));\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        const authorsList = this.props.authors.map(author => <AuthorListItem key={author.id} {...author} editHandler={this.handleEdit} deleteHandler={this.handleDelete}/>)\r\n        return (\r\n            <section className=\"authors\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" required name=\"name\" placeholder=\"Author name\" onChange={this.handleChange} value={this.state.name}/>\r\n                    <input type=\"number\" required name=\"noOfBooksPublished\" placeholder=\"Books published\" onChange={this.handleChange} value={this.state.noOfBooksPublished}/>\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n                <div className=\"author-list\">\r\n                    {authorsList}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        authors: store.authors\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Authors);","export const setBooks = (books) => {\r\n  return {\r\n    type: 'SET_BOOKS',\r\n    data: {\r\n        books\r\n    }\r\n  }\r\n}\r\n\r\nexport const addBook = (book) => {\r\n    return {\r\n      type: 'ADD_BOOK',\r\n      data: {\r\n          book\r\n      }\r\n    }\r\n  }\r\n\r\n  export const editBook = (book) => {\r\n    return {\r\n      type: 'EDIT_BOOK',\r\n      data: {\r\n        book\r\n      }\r\n    }\r\n  }\r\n\r\n  export const deleteBook = (bookId) => {\r\n    return {\r\n        type: 'DELETE_BOOK',\r\n        data: {\r\n            bookId\r\n        }\r\n    }\r\n}","export const GET_ALL_BOOKS = `\r\n    query {\r\n        books {\r\n            id\r\n            name\r\n            authorId\r\n            author {\r\n                name\r\n                id\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const ADD_BOOK = `\r\n    mutation addBook($name:String!, $authorId: Int!) {\r\n        addBook(name:$name,authorId:$authorId) {\r\n            name\r\n            id\r\n            authorId\r\n            author {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport const DELETE_BOOK = `\r\n    mutation deleteBook($id: Int!){\r\n        deleteBook(id:$id) {\r\n            result\r\n        }\r\n    }  \r\n`;\r\n\r\nexport const EDIT_BOOK = `\r\n    mutation updateBook($id: Int!, $name: String, $authorId: Int) {\r\n        updateBook(id:$id, name:$name, authorId:$authorId){\r\n            id\r\n            name\r\n            authorId\r\n            author {\r\n                id\r\n                name\r\n            }\r\n        }\r\n    }\r\n`","import { mutationGraphQL, queryGraphQL, URI } from './';\r\nimport { ADD_BOOK, DELETE_BOOK, EDIT_BOOK, GET_ALL_BOOKS } from './queries/book';\r\n\r\nexport async function fetchAllBooks() {\r\n    const books = await queryGraphQL(GET_ALL_BOOKS);\r\n    return books.books;\r\n}\r\n\r\nexport async function addBook(book) {\r\n    return await mutationGraphQL(ADD_BOOK, book);\r\n}\r\n\r\nexport async function deleteBook(id) {\r\n    return await mutationGraphQL(DELETE_BOOK, {id});\r\n}\r\n\r\nexport async function editBook(book) {\r\n    return await mutationGraphQL(EDIT_BOOK, book)\r\n}","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport * as BookActions from '../redux/actions/book';\r\nimport Swal from 'sweetalert2';\r\nimport { addBook, deleteBook, editBook, fetchAllBooks } from '../graphql/book';\r\n\r\nfunction BookListItem({id, name, authorId, editHandler, deleteHandler, author}) {\r\n    return (\r\n        <div className=\"list-item\">\r\n            <span>{id}</span>\r\n            <span>{name}</span>\r\n            <span>{author.name || ''}</span>\r\n            <span className=\"button-container\">\r\n                <button onClick={() => editHandler({id, name, authorId})}>Edit</button>\r\n                <button onClick={() => deleteHandler(id)}>Delete</button>\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass Books extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: '',\r\n            authorId: 0\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        console.log(e.target.name, e.target.value)\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const book = {\r\n            name: this.state.name,\r\n            authorId: parseInt(this.state.authorId)\r\n        };\r\n\r\n        const savedBook = await addBook(book);\r\n        console.log(savedBook);\r\n\r\n        this.props.dispatch(BookActions.addBook(savedBook.addBook));\r\n        this.setState({\r\n            name: '',\r\n            authorId: ''\r\n        });\r\n    }\r\n\r\n    handleEdit = async (editData) => {\r\n        const authorsList = this.props.authors.map(author => `<option key=\"${author.id}\" value=\"${author.id}\">${author.name}</option>`);\r\n        const { value } = await Swal.fire({\r\n            title: 'Edit Author',\r\n            showCancelButton: true,\r\n            width: 600,\r\n            padding: '3em',\r\n            background: '#fff url(https://sweetalert2.github.io//images/trees.png)',\r\n            backdrop: `\r\n                rgba(0,0,123,0.4)\r\n                url(\"https://sweetalert2.github.io//images/nyan-cat.gif\")\r\n                left top\r\n                no-repeat\r\n            `,\r\n            html: `\r\n                <input type=\"text\" id=\"book-name\" class=\"modal-input\" required placeholder=\"Author Name\" value=\"${editData.name}\"/>\r\n                <select id=\"book-authorId\" class=\"modal-input\" required value=${editData.authorId}>\r\n                    ${authorsList}\r\n                </select>\r\n            `,\r\n            focusConfirm: false,\r\n            allowOutsideClick: false,\r\n            preConfirm: () => {\r\n                const name = document.getElementById('book-name').value;\r\n                const authorId = parseInt(document.getElementById('book-authorId').value);\r\n                return {\r\n                    name,\r\n                    authorId\r\n                }\r\n            }\r\n        });\r\n        let book = {};\r\n        if(!value) {\r\n            book = editData;\r\n        } else {\r\n            book = {\r\n                ...value,\r\n                id: editData.id\r\n            };\r\n        }\r\n        const editedBook = await editBook(book);\r\n        console.log(editedBook);\r\n        this.props.dispatch(BookActions.editBook(editedBook.updateBook));\r\n    }\r\n\r\n    handleDelete = async (id) => {\r\n        await deleteBook(id)\r\n        this.props.dispatch(BookActions.deleteBook(id));\r\n    }\r\n\r\n    render() {\r\n        // const GET_BOOKS = gql`\r\n        //     {\r\n        //         books{\r\n        //         authorId\r\n        //         id\r\n        //         name\r\n        //         }\r\n        //     }\r\n        // `;\r\n        const booksList = this.props.books.map(book => <BookListItem key={book.id} {...book} editHandler={this.handleEdit} deleteHandler={this.handleDelete}/>)\r\n        const authorsList = this.props.authors.map(author => <option key={author.id} value={author.id}>{author.name}</option>);\r\n        return (\r\n            <section className=\"books\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" required name=\"name\" placeholder=\"Book name\" onChange={this.handleChange} value={this.state.name}/>\r\n                    <select name=\"authorId\" required onChange={this.handleChange} value={this.state.authorId}>\r\n                        {authorsList}\r\n                    </select>\r\n                    <input type=\"submit\"/>\r\n                </form>\r\n                <div className=\"book-list\">\r\n                    {booksList}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        books: store.books,\r\n        authors: store.authors\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Books);","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom'\r\nimport { fetchAllBooks } from '../graphql/book';\r\nimport { fetchAllAuthors } from '../graphql/author';\r\nimport * as BookActions from '../redux/actions/book';\r\nimport * as AuthorActions from '../redux/actions/author';\r\n\r\nclass Tabs extends React.Component {\r\n    async componentDidMount() {\r\n        const authors =  await fetchAllAuthors();\r\n        this.props.dispatch(AuthorActions.setAuthors(authors));\r\n        const books = await fetchAllBooks();\r\n        this.props.dispatch(BookActions.setBooks(books));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"tabs\">\r\n                <NavLink activeClassName=\"tab-active\" className=\"tab\" to=\"/books\">Books</NavLink>\r\n                <NavLink activeClassName=\"tab-active\" className=\"tab\" to=\"/authors\">Authors</NavLink>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        books: store.books,\r\n        authors: store.authors\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Tabs);","import React from 'react';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport Authors from './components/Authors.component';\nimport Books from './components/Books.component';\nimport Tabs from './components/Tabs.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tabs />\n      <main>\n        <Switch>\n          <Route path=\"/\" exact render={() => <Redirect to=\"/books\" />}/>\n          <Route path=\"/books\" component={Books}/>\n          <Route path=\"/authors\" component={Authors}/>\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const authorReducer = (state = [], action) => {\r\n    console.log(action);\r\n    switch(action.type) {\r\n        case 'SET_AUTHORS':\r\n            state = action.data.authors;\r\n            return state;\r\n        case 'ADD_AUTHOR':\r\n            state = [...state, action.data.author]\r\n            return state;\r\n        case 'EDIT_AUTHOR':\r\n            state = state.map(author => {\r\n                if(author.id === action.data.author.id) {\r\n                    return action.data.author;\r\n                }\r\n                return author;\r\n            });\r\n            return state;\r\n        case 'DELETE_AUTHOR':\r\n            state = state.filter(author => author.id !== action.data.authorId);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default authorReducer;","const bookReducer = (state = [], action) => {\r\n    switch(action.type) {\r\n        case 'SET_BOOKS':\r\n            state = action.data.books;\r\n            return state;\r\n        case 'ADD_BOOK':\r\n            state = [...state, action.data.book];\r\n            return state;\r\n        case 'EDIT_BOOK':\r\n            state = state.map(book => {\r\n                if(book.id === action.data.book.id) {\r\n                    return action.data.book;\r\n                }\r\n                return book;\r\n            });\r\n            return state;\r\n        case 'DELETE_BOOK':\r\n            state = state.filter(book => book.id !== action.data.bookId);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default bookReducer;","import { combineReducers } from 'redux';\r\nimport authorReducer from './author';\r\nimport bookReducer from './book';\r\n\r\nconst allReducers = combineReducers({\r\n    authors: authorReducer,\r\n    books: bookReducer\r\n});\r\n\r\nexport default allReducers;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore } from 'redux';\r\nimport reducers from './redux/reducers';\r\nimport { Provider } from 'react-redux';\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}